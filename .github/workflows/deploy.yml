name: Deploy

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

concurrency:
  group: deploy-production
  cancel-in-progress: false

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: production

    env:
      NODE_VERSION: 24

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Enable Corepack
        run: corepack enable

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      #          cache: 'yarn'

      - name: Install backend deps
        working-directory: backend
        run: yarn install

      #      - name: Backend lint
      #        working-directory: backend
      #        run: yarn lint

      #      - name: Backend tests
      #        working-directory: backend
      #        run: |
      #          yarn test --ci --runInBand
      #          yarn test:e2e

      - name: Build backend
        working-directory: backend
        run: yarn build

      - name: Install administration deps
        working-directory: frontends/administration
        run: yarn install

      - name: Build administration
        working-directory: frontends/administration
        run: yarn build

      - name: Install market deps
        working-directory: frontends/market
        run: yarn install

      - name: Build market
        working-directory: frontends/market
        run: yarn build

      # (Опционально) можно упаковать node_modules backend в tar для ускорения переноса
      - name: Package backend artifacts
        run: |
          tar -czf backend_artifacts.tar.gz backend/dist backend/node_modules backend/package.json backend/package-lock.json backend/yarn.lock || true
          tar -czf admin_dist.tar.gz -C frontends/administration dist
          tar -czf market_dist.tar.gz -C frontends/market dist

      - name: Setup SSH agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: |
            ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Add server to known_hosts
        shell: bash
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -p "${{ secrets.SSH_PORT }}" "${{ secrets.SSH_HOST }}" >> ~/.ssh/known_hosts

      - name: Transfer artifacts
        env:
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_PORT: ${{ secrets.SSH_PORT }}
          APP_DIR: ${{ secrets.APP_DIR }}
        run: |
          echo "==> Создаю директории на сервере"
          ssh -p "$SSH_PORT" "$SSH_USER@$SSH_HOST" "mkdir -p $APP_DIR/backend/dist $APP_DIR/backend/public/admin $APP_DIR/backend/public/market"

          echo "==> Копирую backend (dist, node_modules)"  # переносим архив и распаковываем
          scp -P "$SSH_PORT" backend_artifacts.tar.gz "$SSH_USER@$SSH_HOST:$APP_DIR/"
          ssh -p "$SSH_PORT" "$SSH_USER@$SSH_HOST" "cd $APP_DIR && tar -xzf backend_artifacts.tar.gz && rm backend_artifacts.tar.gz"

          echo "==> Копирую administration dist"
          scp -P "$SSH_PORT" admin_dist.tar.gz "$SSH_USER@$SSH_HOST:$APP_DIR/"
          ssh -p "$SSH_PORT" "$SSH_USER@$SSH_HOST" "cd $APP_DIR && rm -rf backend/public/admin/* && tar -xzf admin_dist.tar.gz && mv dist/* backend/public/admin/ && rm -rf dist admin_dist.tar.gz"

          echo "==> Копирую market dist"
          scp -P "$SSH_PORT" market_dist.tar.gz "$SSH_USER@$SSH_HOST:$APP_DIR/"
          ssh -p "$SSH_PORT" "$SSH_USER@$SSH_HOST" "cd $APP_DIR && rm -rf backend/public/market/* && tar -xzf market_dist.tar.gz && mv dist/* backend/public/market/ && rm -rf dist market_dist.tar.gz"

      - name: Restart backend service
        env:
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_PORT: ${{ secrets.SSH_PORT }}
          PM2_APP_NAME: ${{ secrets.PM2_APP_NAME }}
          APP_DIR: ${{ secrets.APP_DIR }}
        run: |
          : "Проверка обязательных переменных"
          [ -n "$APP_DIR" ] || { echo 'APP_DIR secret not set'; exit 1; }
          [ -n "$SSH_HOST" ] || { echo 'SSH_HOST secret not set'; exit 1; }
          [ -n "$SSH_USER" ] || { echo 'SSH_USER secret not set'; exit 1; }
          [ -n "$SSH_PORT" ] || { echo 'SSH_PORT secret not set'; exit 1; }
          if [ -z "$PM2_APP_NAME" ]; then PM2_APP_NAME=backend-app; fi
          echo "==> Restarting backend on remote host"
          ssh -p "$SSH_PORT" "$SSH_USER@$SSH_HOST" "APP_DIR='$APP_DIR' PM2_APP_NAME='$PM2_APP_NAME' bash -s" <<'EOSSH'
          set -euo pipefail
          : "Fallback значений (на случай если не передались)"
          : "${APP_DIR:=/var/www/node/valira}"
          : "${PM2_APP_NAME:=backend-app}"
          cd "$APP_DIR/backend" || { echo "Directory $APP_DIR/backend not found"; exit 2; }
          echo "[remote] Working dir: $(pwd)"
          echo "[remote] Перезапуск backend (APP_DIR=$APP_DIR PM2_APP_NAME=$PM2_APP_NAME)"
          
          if pm2 list | grep -q "$PM2_APP_NAME"; then
            echo '[remote] PM2 процесс найден — restart'
            pm2 restart "$PM2_APP_NAME"
          else
            echo '[remote] PM2 процесс не найден — start'
            pm2 start "yarn start:prod" --name "$PM2_APP_NAME"
          fi
          pm2 save || true
          EOSSH

      - name: Done
        run: echo "Deployment finished successfully."
